Task: To clean and serve the data via endpoints running on RESTful architecture, using versioning system.
Required File: news_list.json


Initialization: The task should be versioned using local git repository, which will be part of final delivery.

Languages/db to use: NodeJs. If you have some understanding of Python, then completing first task in python will be an advantage.
		  MongoDb to store and serve filtered data from task 1. If you are comfortable with SQL database, then use locally hosted SQLite
					
Deadline: 5 days from task delivery


The Final project should be in a zip file composed of two folders, besides ".git" (or, preferable, seperate .git for each task).

First folder (TASK1) should contain scripts that cleans the data, uploads it to Database.

Second folder (TASK2) should contain the script used to serve the content from database instance where it is hosted. 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TASK DETAILS:

Attached is a json file containing some news elements in different languages. This data is not cleaned and might contain duplicate items. 

-----------------------------------------------------------------------------------------------------------------------------
TASK 1:

Your first task is to clean the data; to remove the duplicate objects and prepare a new file with unique entries 
Unique Entry: Defined as an entry where title or titleEn fields cannot be null, and two news with exactly same title (not titleEn) cannont exist in filtered data.

Then create a db instance inside database server (locally or web hosted) and save the data there for next steps.

If any indexes are required and used for second part, include those in TASK 1 folder, along with db schema you worked with

-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
This filtered data is then served as groups according to the given conditions via an REST API.

TASK 2:

Your second task is to design this REST API with multiple endpoints, each endpoint should output data as an array of objects in different structures as explained below. 
For the APIs some considerations will be made before response is served, as decribed below.
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
Expected API behaviour:

Response header should contain API version (1.0.0) in key X-API-Version
API should explicitly timeout after 5 seconds with correct response code sent to the user
All requests should be made using GET method.

-----------------------------------------------------------------------------------------------------------------------------

Endpoint 1: Search News by Title
User input required: String to search
The user should input some keywords in the parameters, your task will be to find one or multiple news containing those terms in the title of the news. 
The language of input text should be english. 
The query should only look inside english titles available in titleEn field and return the objects sorted by publication_date. 
If there are none return an empty list.

The final object should contain folowing fields:
[news_id(_id), publication_date(pub_date), url, source, nationality, language, summary, description, countries, cities with only name]


-----------------------------------------------------------------------------------------------------------------------------


Endpoint 2: Group by nationality- it should follow below rules:
User input required: None
it serves from entire collection/table "news", data, grouped by nationality. i.e. All the news with common nationality will form a group. Response should have following JSON format


[{
	id: unique_identifier for group (UUID or similar, generated by you),
	nationality: country of news source,(string),
	news_count: number of unique news in the group (integer),
	news_grouped: list of news that matches the criteria (list of  News object sorted in decreasing order according to publication_date)
 },]

Final array will be sorted by news_count parameter in descending order.
The news_grouped element should have following structure with keys names given below (values in () are keys name available inside JSON data):
[news_id(_id), publication_date(pub_date), url, source, language, summary, countries, cities with only name]

-----------------------------------------------------------------------------------------------------------------------------


Dos and Dont's:
- Do not spend extraordinary amount of time in the tasks. We estimate an approximate time investment between 4-8 hours including both tasks and you are given enough days to spread out task according to your schedule. 
- A Readme on how to execute each program should be present. It does not need to have each step, just folder structure and commands that need to be executed to start each scripts.
- You are free to use any source to assist in your code.
- To complete matching in first task, use of regex is not recommended, a simple string match can get the task done.
- No unit tests or other tests are required to be written for the final delivery, but the code should have pass basic checks and validations of user input parameters.
- User authentication to access the API is not required. 
- Serving the right content is necessary.
- If you are unable to complete the task in the alloted time, you can still send partial solution for your application to be considered for next interview step.
- Prioritize completing single  endpoint first, having one working endpoint in incomplete project will count more in evaluation than having all endpoints but none working.
- Do not work on code optimization. Your goal is to provide a working solution at this point.





